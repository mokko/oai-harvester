name    = HTTP-OAI-MyHarvester
author  = Maurice Mengel <mauricemengel@gmail.com>
license = Perl_5
copyright_holder = Maurice Mengel
copyright_year   = 2011

;if tag already exists dzil release will fail; first rm tag:
;git tag -d v0.006
;git push origin :refs/tags/v0.006
version = 0.001
; see CHANGES for RELEASE HISTORY
; CHANGES is maintained manually for the time being

; RELEASE STRATEGY (derived from OllyG)
; I require from my developers that they use dzil, but not from my users
; who can simply install it from github with clone/pull
; http://search.cpan.org/~oliver/Dist-Zilla-PluginBundle-Author-OLIVER
; I want to push to github, not ever to CPAN with this stupid tool
; a) checkout devel and push to devel
; b) use 'dzil release' to push to master.

[ReadmeFromPod]
[@Filter]
-bundle = @Basic
-remove = Readme
-remove = UploadToCPAN
-remove = CheckManifest

;I want manual versions
;[AutoVersion]
;[NextRelease]
[PkgVersion] ; writes version from dist.ini in all *.pm files

;POD modifier
;[PodWeaver]
[PickyPodWeaver] ; changes only POD with ABSTRACT
;no way to configure lists from dist.ini?
;[Transformer]
;transformer = List

[AutoPrereqs] ; put Prereqs in Makefile.PL
[MetaYAML]
[MetaJSON] ; write META.json
[InstallGuide] ; write an INSTALL file
[PruneFiles] ; eliminate from build dir
filenames = Makefile.PL
filenames = dist.ini
filenames = weaver.ini
;specific dirs
match	  = ^data/
match     = bak/

;emacs bak
match     = ~$
match     = ^#
;extensions - should be limited to main directory: is really stupid
match	  = .log$
match	  = .mpx$
match	  = .txt$
match	  = .xml$
match     = .yml$
match	  = .zip$
;excluding general file extensions also excludes files in tdata
;i need an exception
[PruneCruft]
except = t/tdata/1-scandir.yml

[Git::CommitBuild]
;don't know what 'branch = ' does
branch =
;release to master!
release_branch = master
message = Build results of %h (on %b)

[@Git]
;commit_msg = Bumped changelog following rel. v%v

[MetaResourcesFromGit]
;[CheckChangeLog]

;tests
[Test::Version]
;[Test::Perl::Critic]
;[PodCoverageTests]
[PodSyntaxTests]
;[KwaliteeTests]
;[NoTabsTests]
;[EOLTests]

;release
;we need the fake to trigger post-release actions
[FakeRelease]

;testRelease seems to be redndant
;[TestRelease]
;ConfirmRelease seems to be redndant
;[ConfirmRelease]

;GitPush gets executed after release
[Git::Push]
; pushes current branch (which should be devel)
; push_to defaults to origin: push_to = origin
; repeatable

;this is deprecated - new release strategy see above
;with new strategy I have README and Makefile.PL in master, but not in devel
;[CopyFilesFromBuild]
;copy = README
;copy = Makefile.PL
